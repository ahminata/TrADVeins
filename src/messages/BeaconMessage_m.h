//
// Generated file, do not edit! Created by nedtool 4.6 from messages/BeaconMessage.msg.
//

#ifndef _BEACONMESSAGE_M_H_
#define _BEACONMESSAGE_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include <Coord.h>
typedef std::vector<int> urgent_message_rec;
// }}

/**
 * Class generated from <tt>messages/BeaconMessage.msg:26</tt> by nedtool.
 * <pre>
 * packet BeaconMessage
 * {
 *     int carId; //Id du vehicle emetteur du beacon
 * 
 *     int nbr_neighbor;// le nombre de voisin
 *     //int ttl;
 *     Coord position;
 *     double speed;
 *     //double accel;
 *     double angleRad;
 *     double vecX;
 *     double vecY;
 *     double vecZ;
 * 
 *     double cbr;// temps d'occupation du canal
 * 	//cMessage* cleanUpTimer;
 * 
 *     urgent_message_rec liste_message_urgence;
 * 
 * 	//int liste_messages_reçus[];
 * }
 * </pre>
 */
class BeaconMessage : public ::cPacket
{
  protected:
    int carId_var;
    int nbr_neighbor_var;
    Coord position_var;
    double speed_var;
    double angleRad_var;
    double vecX_var;
    double vecY_var;
    double vecZ_var;
    double cbr_var;
    urgent_message_rec liste_message_urgence_var;

  private:
    void copy(const BeaconMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BeaconMessage&);

  public:
    BeaconMessage(const char *name=NULL, int kind=0);
    BeaconMessage(const BeaconMessage& other);
    virtual ~BeaconMessage();
    BeaconMessage& operator=(const BeaconMessage& other);
    virtual BeaconMessage *dup() const {return new BeaconMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getCarId() const;
    virtual void setCarId(int carId);
    virtual int getNbr_neighbor() const;
    virtual void setNbr_neighbor(int nbr_neighbor);
    virtual Coord& getPosition();
    virtual const Coord& getPosition() const {return const_cast<BeaconMessage*>(this)->getPosition();}
    virtual void setPosition(const Coord& position);
    virtual double getSpeed() const;
    virtual void setSpeed(double speed);
    virtual double getAngleRad() const;
    virtual void setAngleRad(double angleRad);
    virtual double getVecX() const;
    virtual void setVecX(double vecX);
    virtual double getVecY() const;
    virtual void setVecY(double vecY);
    virtual double getVecZ() const;
    virtual void setVecZ(double vecZ);
    virtual double getCbr() const;
    virtual void setCbr(double cbr);
    virtual urgent_message_rec& getListe_message_urgence();
    virtual const urgent_message_rec& getListe_message_urgence() const {return const_cast<BeaconMessage*>(this)->getListe_message_urgence();}
    virtual void setListe_message_urgence(const urgent_message_rec& liste_message_urgence);
};

inline void doPacking(cCommBuffer *b, BeaconMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BeaconMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef _BEACONMESSAGE_M_H_

