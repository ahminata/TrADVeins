//
// Generated file, do not edit! Created by nedtool 4.6 from messages/DataMessage.msg.
//

#ifndef _DATAMESSAGE_M_H_
#define _DATAMESSAGE_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include <vector>
#include <Coord.h>

typedef struct {
        int sender_id;
        
        double utility;

        //cMessage* cleanUpTimer;
    } neighbor_rec;
typedef std::vector<neighbor_rec> neighbors_rec;
// }}

/**
 * Class generated from <tt>messages/DataMessage.msg:35</tt> by nedtool.
 * <pre>
 * packet DataMessage
 * {
 *     //bool sentSCFState = false;  
 *     int message_id;//  id du message
 *     int sender_id;
 *     Coord messageOriginPosition;
 * 
 *     //int sender_origine_address;
 * 
 * 
 *     simtime_t messageTTL;
 *     simtime_t messageOriginTime;
 *     int messageLength;
 * 
 *     //Coord messageOriginPosition;
 *     double vecX;
 *     double vecY;
 *     double vecZ;
 * 
 *     simtime_t timestamp;
 * 
 * 	//cMessage* broadcastTimer;//self message for broadcast suppression
 * 
 *     neighbors_rec liste_priority_trad;
 * }
 * </pre>
 */
class DataMessage : public ::cPacket
{
  protected:
    int message_id_var;
    int sender_id_var;
    Coord messageOriginPosition_var;
    simtime_t messageTTL_var;
    simtime_t messageOriginTime_var;
    int messageLength_var;
    double vecX_var;
    double vecY_var;
    double vecZ_var;
    simtime_t timestamp_var;
    neighbors_rec liste_priority_trad_var;

  private:
    void copy(const DataMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DataMessage&);

  public:
    DataMessage(const char *name=NULL, int kind=0);
    DataMessage(const DataMessage& other);
    virtual ~DataMessage();
    DataMessage& operator=(const DataMessage& other);
    virtual DataMessage *dup() const {return new DataMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getMessage_id() const;
    virtual void setMessage_id(int message_id);
    virtual int getSender_id() const;
    virtual void setSender_id(int sender_id);
    virtual Coord& getMessageOriginPosition();
    virtual const Coord& getMessageOriginPosition() const {return const_cast<DataMessage*>(this)->getMessageOriginPosition();}
    virtual void setMessageOriginPosition(const Coord& messageOriginPosition);
    virtual simtime_t getMessageTTL() const;
    virtual void setMessageTTL(simtime_t messageTTL);
    virtual simtime_t getMessageOriginTime() const;
    virtual void setMessageOriginTime(simtime_t messageOriginTime);
    virtual int getMessageLength() const;
    virtual void setMessageLength(int messageLength);
    virtual double getVecX() const;
    virtual void setVecX(double vecX);
    virtual double getVecY() const;
    virtual void setVecY(double vecY);
    virtual double getVecZ() const;
    virtual void setVecZ(double vecZ);
    virtual simtime_t getTimestamp() const;
    virtual void setTimestamp(simtime_t timestamp);
    virtual neighbors_rec& getListe_priority_trad();
    virtual const neighbors_rec& getListe_priority_trad() const {return const_cast<DataMessage*>(this)->getListe_priority_trad();}
    virtual void setListe_priority_trad(const neighbors_rec& liste_priority_trad);
};

inline void doPacking(cCommBuffer *b, DataMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DataMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef _DATAMESSAGE_M_H_

